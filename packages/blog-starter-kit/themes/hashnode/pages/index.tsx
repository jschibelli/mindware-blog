import { InferGetStaticPropsType } from 'next';
import Head from 'next/head';
import Image from 'next/legacy/image';
import { useState } from 'react';
import { twJoin } from 'tailwind-merge';

import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import { AppProvider } from '../components/contexts/appContext';
import { CustomNavigation } from '../components/custom-navigation';
import { Layout } from '../components/layout';
import ModernLayoutPosts from '../components/modern-layout-posts';

import FeaturedPosts from '../components/features-posts';

import PublicationFooter from '../components/publication-footer';
import PublicationMeta from '../components/publication-meta';
import { resizeImage } from '../utils/image';

const REVALIDATION_INTERVAL_POST_VIEWS_ACTIVE = 60 * 60; // 1 hour
const REVALIDATION_INTERVAL = 60 * 60 * 24 * 30; // 1 month

const NoPostsImage = ({ alt = '' }) => {
	return (
		<Image
			alt={alt}
			height={500}
			width={500}
			src={resizeImage(
				'https://cdn.hashnode.com/res/hashnode/image/upload/v1625676910594/d1jtXmfQC.png?auto=compress',
				{ h: 800, w: 800, c: 'thumb' },
			)}
		/>
	);
};

export default function Index(props: any) {
	const { publication } = props;

	// Mock posts data for demonstration - only show 3 posts for homepage
	const mockPosts = {
		edges: [
			{
				node: {
					id: '1',
					title: 'Getting Started with Next.js',
					slug: 'getting-started-with-nextjs',
					publishedAt: '2024-01-15',
					author: { name: 'John Doe' },
					coverImage: { url: 'https://via.placeholder.com/800x400' },
					brief: 'Learn how to build modern web applications with Next.js...',
					__typename: 'Post',
					url: '/getting-started-with-nextjs',
					readTimeInMinutes: 5,
					views: 100,
				},
				cursor: '1_2024-01-15',
			},
			{
				node: {
					id: '2',
					title: 'Understanding React Hooks',
					slug: 'understanding-react-hooks',
					publishedAt: '2024-01-10',
					author: { name: 'John Doe' },
					coverImage: { url: 'https://via.placeholder.com/800x400' },
					brief: 'Deep dive into React Hooks and their use cases...',
					__typename: 'Post',
					url: '/understanding-react-hooks',
					readTimeInMinutes: 8,
					views: 150,
				},
				cursor: '2_2024-01-10',
			},
			{
				node: {
					id: '3',
					title: 'TypeScript Best Practices',
					slug: 'typescript-best-practices',
					publishedAt: '2024-01-05',
					author: { name: 'John Doe' },
					coverImage: { url: 'https://via.placeholder.com/800x400' },
					brief: 'Essential TypeScript patterns for better code quality...',
					__typename: 'Post',
					url: '/typescript-best-practices',
					readTimeInMinutes: 10,
					views: 200,
				},
				cursor: '3_2024-01-05',
			},
		],
		pageInfo: {
			hasNextPage: false,
			endCursor: '3_2024-01-05',
		},
	};

	const postsToBeRendered: any = mockPosts;

	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>
						{publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta
						property="twitter:title"
						content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					/>
					<meta
						property="twitter:description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<CustomNavigation publication={publication} />
				<div>
					{postsToBeRendered.edges.length > 0 ? (
						<FeaturedPosts
							posts={postsToBeRendered.edges.map((p: any) => p.node).slice(0, 3)}
							publication={publication}
						/>
					) : null}

					{publication.about?.html ? (
						<div
							className="blog-author-container border-b dark:border-slate-800"
						>
							<div
								className={twJoin(
									'blog-author-area feed-width mx-auto md:w-3/4 lg:w-2/3',
									'px-4 lg:px-8',
								)}
							>
								<PublicationMeta
									author={publication.author}
									aboutHTML={publication.about.html}
									isTeam={publication.isTeam}
								/>
							</div>
						</div>
					) : null}

					<div className="blog-content-area feed-width mx-auto md:w-2/3">
						<div>
							{postsToBeRendered.edges.length === 0 ? (
								<>
									<div className="min-h-30 my-10 flex w-full flex-col items-center px-6 dark:border-slate-800">
										<div className="block">
											<NoPostsImage alt="No Posts" />
										</div>
									</div>
								</>
							) : null}
						</div>
					</div>

					{postsToBeRendered.edges.length > 3 && postsToBeRendered.edges.length <= 6 ? (
						<ModernLayoutPosts
							publication={publication}
							posts={{
								edges: postsToBeRendered.edges.slice(3, 6), // Only show next 3 posts
								pageInfo: postsToBeRendered.pageInfo
							}}
							fetchMore={() => {}} // Disable fetch more since we only want 3 posts
							fetchedOnce={true}
							fetching={false}
						/>
					) : null}
				</div>
				{publication ? (
					<PublicationFooter
						authorName={publication.author.name}
						title={publication.title}
						imprint={publication.imprint}
						disableFooterBranding={publication.preferences.disableFooterBranding}
						isTeam={publication.isTeam}
						logo={publication.preferences.logo}
						darkMode={publication.preferences.darkMode}
					/>
				) : null}
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps = async () => {
	// Mock publication data for demonstration
	const publication: any = {
		title: 'Hashnode Blog Starter Kit',
		displayTitle: 'Hashnode Blog Starter Kit',
		url: 'https://example.com',
		descriptionSEO: 'A modern blog built with Next.js and Hashnode',
		author: { name: 'John Doe' },
		ogMetaData: {
			image: 'https://via.placeholder.com/1200x630',
		},
		preferences: {
			disableFooterBranding: false,
			logo: null,
			darkMode: false,
		},
		isTeam: false,
		imprint: null,
		about: {
			html: '<p>Welcome to our blog! We share insights about web development, design, and technology.</p>',
		},
	};

	return {
		props: {
			publication,
		},
		revalidate: 1,
	};
};
