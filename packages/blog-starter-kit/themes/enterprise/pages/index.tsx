import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { 
	PublicationFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
} from '../generated/graphql';

// Import all the new components
import Hero from '../components/hero';
import Intro from '../components/intro';
import FeaturedProjects from '../components/featured-projects';
import SkillsTicker from '../components/skills-ticker';
import CTABanner from '../components/cta-banner';
import LatestPosts from '../components/latest-posts';

// Import navigation and footer
import ModernHeader from '../components/modern-header';
import { Footer } from '../components/footer';
import { AppProvider } from '../components/contexts/appContext';
import Chatbot from '../components/ui/Chatbot';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	recentPosts: PostFragment[];
};

export default function Home({ publication, recentPosts }: Props) {
	return (
		<AppProvider publication={publication}>
			<Head>
				<title>
					{publication.displayTitle || publication.title || 'John Schibelli - Senior Front-End Developer'}
				</title>
				<meta
					name="description"
					content={
						publication.descriptionSEO || "Senior Front-End Developer with 15+ years of experience building scalable, high-performance web apps and company websites. Skilled in React, Next.js, TypeScript, and Tailwind CSS with a strong focus on accessibility, SEO, and client success."
					}
				/>
				<meta property="twitter:card" content="summary_large_image" />
				<meta
					property="twitter:title"
					content={publication.displayTitle || publication.title || 'John Schibelli - Senior Front-End Developer'}
				/>
				<meta
					property="twitter:description"
					content={
						publication.descriptionSEO || "Senior Front-End Developer with 15+ years of experience building scalable, high-performance web apps and company websites. Skilled in React, Next.js, TypeScript, and Tailwind CSS."
					}
				/>
				<meta property="twitter:image" content={getAutogeneratedPublicationOG(publication)} />
				<meta property="og:image" content={getAutogeneratedPublicationOG(publication)} />
				<meta property="og:image:width" content="1200" />
				<meta property="og:image:height" content="630" />
				<meta property="og:title" content={publication.displayTitle || publication.title} />
				<meta property="og:description" content={publication.descriptionSEO || publication.title} />
				<meta property="og:type" content="website" />
				<meta property="og:url" content={publication.url} />
				<link rel="canonical" href={publication.url} />
				<script
					type="application/ld+json"
					dangerouslySetInnerHTML={{
						__html: JSON.stringify(addPublicationJsonLd(publication)),
					}}
				/>
			</Head>

			{/* Navigation */}
			<ModernHeader publication={publication} />

			{/* Homepage Sections in order */}
			<main>
				{/* 1. Hero Section */}
				<Hero />

				{/* 2. Intro Section */}
				<Intro />

				{/* 3. Featured Projects */}
				<FeaturedProjects />

				{/* 4. Skills & Tools Ticker */}
				<SkillsTicker />

				{/* 5. CTA Banner */}
				<CTABanner />

				{/* 6. Latest Posts Teaser */}
				<LatestPosts />
			</main>

			{/* Footer */}
			<Footer />
			
			{/* Chatbot */}
			<Chatbot />
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	if (!GQL_ENDPOINT) {
		throw new Error('NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT is not defined');
	}

	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 0,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}

	return {
		props: {
			publication,
			recentPosts: [],
		},
		revalidate: 1,
	};
};
