import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { ArticleSVG } from '../components/icons';
import { Layout } from '../components/layout';
import { MorePosts } from '../components/more-posts';
import { Navbar } from '../components/navbar';
import ModernHero from '../components/modern-hero';
import { CustomNavigation } from '../../../components/custom-navigation';
import ModernPostCard from '../components/modern-post-card';
import FeaturedPostCard from '../components/featured-post-card';
import NewsletterCTA from '../components/newsletter-cta';
import EnhancedPagination from '../components/enhanced-pagination';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfo,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
import { DEFAULT_COVER } from '../utils/const';

const SubscribeForm = dynamic(() =>
	import('../components/subscribe-form').then((mod) => mod.SubscribeForm),
);

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialAllPosts: PostFragment[];
	initialPageInfo: PageInfo;
	initialTotalPosts: number;
};

export default function Blog({ publication, initialAllPosts, initialPageInfo, initialTotalPosts }: Props) {
	const [allPosts, setAllPosts] = useState<PostFragment[]>(initialAllPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [loadedMore, setLoadedMore] = useState(false);
	const [isLoading, setIsLoading] = useState(false);
	const [totalPosts, setTotalPosts] = useState(initialTotalPosts);
	const [initialPosts] = useState<PostFragment[]>(initialAllPosts);
	const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

	// Intersection Observer for scroll animations
	useEffect(() => {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						setVisibleSections(prev => new Set([...prev, entry.target.id]));
					}
				});
			},
			{ 
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			}
		);

		// Observe all sections
		const sections = document.querySelectorAll('[data-animate-section]');
		sections.forEach((section) => {
			observer.observe(section);
		});

		return () => {
			sections.forEach((section) => {
				observer.unobserve(section);
			});
		};
	}, []);

	const loadMore = async () => {
		if (isLoading) return;
		
		setIsLoading(true);
		try {
			const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
				GQL_ENDPOINT,
				MorePostsByPublicationDocument,
				{
					first: 10,
					host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
					after: pageInfo.endCursor,
				},
			);
			if (!data.publication) {
				return;
			}
			const newPosts = data.publication.posts.edges.map((edge) => edge.node);
			setAllPosts([...allPosts, ...newPosts]);
			setPageInfo(data.publication.posts.pageInfo);
			setTotalPosts(data.publication.posts.totalDocuments);
			setLoadedMore(true);
		} catch (error) {
			console.error('Error loading more posts:', error);
		} finally {
			setIsLoading(false);
		}
	};

	const returnToFirstPage = () => {
		setAllPosts(initialPosts);
		setPageInfo(initialPageInfo);
		setLoadedMore(false);
		setTotalPosts(initialTotalPosts);
	};

	const morePosts = allPosts.slice(7);

	const isSectionVisible = (sectionId: string) => visibleSections.has(sectionId);

	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>
						{publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'} - Blog
					</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta
						property="twitter:title"
						content={`${publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'} - Blog`}
					/>
					<meta
						property="twitter:description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<CustomNavigation publication={publication} />
				
				<Container className="mx-auto max-w-7xl px-4 py-8">
					{/* Featured Post Section */}
					{allPosts.length > 0 && (
						<div 
							id="featured-post-section"
							data-animate-section
							className={`mb-12 transition-all duration-1000 ease-out ${
								isSectionVisible('featured-post-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<h2 className="mb-8 text-3xl font-bold">Featured Post</h2>
							<FeaturedPostCard
								title={allPosts[0].title}
								excerpt={allPosts[0].brief}
								coverImage={allPosts[0].coverImage?.url || DEFAULT_COVER}
								date={allPosts[0].publishedAt}
								slug={allPosts[0].slug}
								readTime="5 min read"
								tags={["Featured", "Technology"]}
							/>
						</div>
					)}

					{/* No Posts State */}
					{allPosts.length === 0 && (
						<div 
							id="no-posts-section"
							data-animate-section
							className={`text-center transition-all duration-1000 ease-out ${
								isSectionVisible('no-posts-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<div className="mx-auto max-w-md">
								<ArticleSVG className="mx-auto h-24 w-24 text-gray-400" />
								<h3 className="mt-4 text-lg font-semibold text-gray-900 dark:text-gray-100">No posts yet</h3>
								<p className="mt-2 text-gray-600 dark:text-gray-400">Check back soon for new content!</p>
							</div>
						</div>
					)}

					{/* Latest Posts Section */}
					{allPosts.length > 1 && (
						<div 
							id="latest-posts-section"
							data-animate-section
							className={`space-y-6 transition-all duration-1000 ease-out ${
								isSectionVisible('latest-posts-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<h2 className="text-2xl font-bold animate-fade-in-up">Latest Posts</h2>
							<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
								{allPosts.slice(1, 7).map((post, index) => (
									<div 
										key={post.id}
										className={`animate-fade-in-up transition-all duration-300 hover:scale-[1.02] ${
											index === 0 ? 'animation-delay-200' :
											index === 1 ? 'animation-delay-300' :
											index === 2 ? 'animation-delay-400' :
											index === 3 ? 'animation-delay-500' :
											index === 4 ? 'animation-delay-600' :
											'animation-delay-700'
										}`}
									>
										<ModernPostCard
											title={post.title}
											excerpt={post.brief}
											coverImage={post.coverImage?.url || DEFAULT_COVER}
											date={post.publishedAt}
											slug={post.slug}
											readTime="3 min read"
											tags={["Technology", "Development"]}
										/>
									</div>
								))}
							</div>
						</div>
					)}

					{/* More Posts Section */}
					{morePosts.length > 0 && (
						<div 
							id="more-posts-section"
							data-animate-section
							className={`transition-all duration-1200 ease-out ${
								isSectionVisible('more-posts-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<MorePosts context="home" posts={morePosts} />
						</div>
					)}

					{/* Enhanced Pagination */}
					<div 
						id="pagination-section"
						data-animate-section
						className={`transition-all duration-1300 ease-out ${
							isSectionVisible('pagination-section') 
								? 'opacity-100 translate-y-0' 
								: 'opacity-0 translate-y-8'
						}`}
					>
						<EnhancedPagination
							pageInfo={pageInfo}
							onLoadMore={loadMore}
							onReturnToFirst={returnToFirstPage}
							isLoading={isLoading}
							hasMorePosts={!!(pageInfo.hasNextPage && pageInfo.endCursor)}
							currentPostsCount={allPosts.length}
							totalPosts={totalPosts}
						/>
					</div>
				</Container>
				<Footer />
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 10,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialAllPosts = publication.posts.edges.map((edge) => edge.node);

	return {
		props: {
			publication,
			initialAllPosts,
			initialPageInfo: publication.posts.pageInfo,
			initialTotalPosts: publication.posts.totalDocuments,
		},
		revalidate: 1,
	};
}; 