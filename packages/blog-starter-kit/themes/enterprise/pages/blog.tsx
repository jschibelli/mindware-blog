import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import { GetStaticProps } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import { Container } from '../components/shared/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/shared/footer';
import { ArticleSVG } from '../components/icons';
import { Layout } from '../components/shared/layout';
import Chatbot from '../components/features/chatbot/Chatbot';

import ModernHeader from '../components/features/navigation/modern-header';
import ModernHero from '../components/features/homepage/modern-hero';
import ModernPostCard from '../components/features/blog/modern-post-card';
import FeaturedPost from '../components/features/blog/featured-post';
import NewsletterCTA from '../components/features/newsletter/newsletter-cta';
import { FacebookSVG, GithubSVG, LinkedinSVG, BlueskySVG, RssSVG } from '../components/icons';

import {
	PageInfo,
	PostFragment,
	PublicationFragment,
} from '../generated/graphql';
import { DEFAULT_COVER } from '../utils/const';

const SubscribeForm = dynamic(() =>
	import('../components/features/newsletter/subscribe-form').then((mod) => mod.SubscribeForm),
);

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/';

type Props = {
	publication: PublicationFragment;
	initialAllPosts: PostFragment[];
	initialPageInfo: PageInfo;
	initialTotalPosts: number;
};

export default function Index({ publication, initialAllPosts, initialPageInfo, initialTotalPosts }: Props) {
	const [allPosts] = useState<PostFragment[]>(initialAllPosts);
	const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

	// Intersection Observer for scroll animations
	useEffect(() => {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						setVisibleSections(prev => new Set([...prev, entry.target.id]));
					}
				});
			},
			{ 
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			}
		);

		// Observe all sections
		const sections = document.querySelectorAll('[data-animate-section]');
		sections.forEach((section) => {
			observer.observe(section);
		});

		return () => {
			sections.forEach((section) => {
				observer.unobserve(section);
			});
		};
	}, []);

	const morePosts = allPosts.slice(4);

	const isSectionVisible = (sectionId: string) => visibleSections.has(sectionId);

	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>
						{publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta
						property="twitter:title"
						content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					/>
					<meta
						property="twitter:description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<ModernHeader publication={publication} />
				
				{/* Modern Hero Section */}
				{allPosts.length > 0 && (
					<div 
						id="hero-section"
						data-animate-section
						className={`transition-all duration-1000 ease-out ${
							isSectionVisible('hero-section') 
								? 'opacity-100 translate-y-0' 
								: 'opacity-0 translate-y-8'
						}`}
					>
						<ModernHero
							title="The Developer's Lens"
							subtitle="Technology & Development"
							description="Unfiltered perspectives on code, creativity, and the constant evolution of technology."
							imageUrl="/assets/hero/hero-image.webp"
						/>
					</div>
				)}

				{/* Social Media Icons - Right under the hero */}
				<div className="py-8 bg-white dark:bg-stone-950">
					<Container className="px-5">
						<div className="flex justify-center">
							<div className="flex items-center gap-4">
								{/* Facebook */}
								<a
									href="https://facebook.com"
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Find us on Facebook, external website, opens in new tab"
									className="flex items-center justify-center rounded-full border border-stone-200 p-3 hover:bg-stone-100 dark:border-stone-700 dark:hover:bg-stone-800 transition-colors text-stone-600 dark:text-stone-400 hover:text-stone-900 dark:hover:text-stone-100"
								>
									<FacebookSVG className="h-5 w-5" />
								</a>
								
								{/* GitHub */}
								<a
									href="https://github.com"
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Find us on Github, external website, opens in new tab"
									className="flex items-center justify-center rounded-full border border-stone-200 p-3 hover:bg-stone-100 dark:border-stone-700 dark:hover:bg-stone-800 transition-colors text-stone-600 dark:text-stone-400 hover:text-stone-900 dark:hover:text-stone-100"
								>
									<GithubSVG className="h-5 w-5 stroke-current" />
								</a>

								{/* LinkedIn */}
								<a
									href="https://linkedin.com"
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Find us on Linkedin, external website, opens in new tab"
									className="flex items-center justify-center rounded-full border border-stone-200 p-3 hover:bg-stone-100 dark:border-stone-700 dark:hover:bg-stone-800 transition-colors text-stone-600 dark:text-stone-400 hover:text-stone-900 dark:hover:text-stone-100"
								>
									<LinkedinSVG className="h-5 w-5 stroke-current" />
								</a>

								{/* Bluesky */}
								<a
									href="https://bsky.app"
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Find us on Bluesky, external website, opens in new tab"
									className="flex items-center justify-center rounded-full border border-stone-200 p-3 hover:bg-stone-100 dark:border-stone-700 dark:hover:bg-stone-800 transition-colors text-stone-600 dark:text-stone-400 hover:text-stone-900 dark:hover:text-stone-100"
								>
									<BlueskySVG className="h-5 w-5 stroke-current" />
								</a>

								{/* RSS Feed */}
								<Link
									prefetch={false}
									href={`/rss.xml`}
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Open blog XML Feed, opens in new tab"
									className="flex items-center justify-center rounded-full border border-stone-200 p-3 hover:bg-stone-100 dark:border-stone-700 dark:hover:bg-stone-800 transition-colors text-stone-600 dark:text-stone-400 hover:text-stone-900 dark:hover:text-stone-100"
								>
									<RssSVG className="h-5 w-5 stroke-current" />
								</Link>
							</div>
						</div>
					</Container>
				</div>

				<Container className="flex flex-col items-stretch gap-10 px-5 pb-10">

					{/* Empty State */}
					{allPosts.length === 0 && (
						<div 
							id="empty-state-section"
							data-animate-section
							className={`grid grid-cols-1 py-20 lg:grid-cols-3 transition-all duration-800 ease-out ${
								isSectionVisible('empty-state-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<div className="col-span-1 flex flex-col items-center gap-5 text-center text-stone-700 dark:text-stone-400 lg:col-start-2">
								<div className="w-20 animate-fade-in-up">
									<ArticleSVG className="stroke-current" />
								</div>
								<p className="text-xl font-semibold animate-fade-in-up animation-delay-200">
									Hang tight! We&apos;re drafting the first article.
								</p>
							</div>
						</div>
					)}

					{/* Featured Post Section */}
					{allPosts.length > 0 && (
						<div 
							id="featured-section"
							data-animate-section
							className={`space-y-12 transition-all duration-900 ease-out ${
								isSectionVisible('featured-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<FeaturedPost
								post={allPosts[0]}
								coverImage={allPosts[0].coverImage?.url || DEFAULT_COVER}
								readTime="5 min read"
								tags={["Featured", "Technology", "Insights"]}
							/>

							{/* Latest Posts Grid */}
							{allPosts.length > 1 && (
								<div 
									id="latest-posts-section"
									data-animate-section
									className={`space-y-6 transition-all duration-1000 ease-out ${
										isSectionVisible('latest-posts-section') 
											? 'opacity-100 translate-y-0' 
											: 'opacity-0 translate-y-8'
									}`}
								>
									<h2 className="text-2xl font-bold text-stone-900 dark:text-stone-100 animate-fade-in-up">Latest Posts</h2>
									<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
										{allPosts.slice(1, 4).map((post, index) => (
											<div 
												key={post.id}
												className={`animate-fade-in-up transition-all duration-300 hover:scale-[1.02] ${
													index === 0 ? 'animation-delay-200' :
													index === 1 ? 'animation-delay-300' :
													'animation-delay-400'
												}`}
											>
												<ModernPostCard
													title={post.title}
													excerpt={post.brief}
													coverImage={post.coverImage?.url || DEFAULT_COVER}
													date={post.publishedAt}
													slug={post.slug}
													readTime="3 min read"
													tags={["Technology", "Development"]}
												/>
											</div>
										))}
									</div>
								</div>
							)}
						</div>
					)}

					{/* Newsletter CTA Section */}
					{allPosts.length > 0 && (
						<div 
							id="newsletter-section"
							data-animate-section
							className={`py-8 transition-all duration-1100 ease-out ${
								isSectionVisible('newsletter-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<NewsletterCTA 
								title="Stay updated with our newsletter"
								showNewsletterForm={true}
								className="py-16"
							/>
						</div>
					)}




				</Container>
				<Footer />
				<Chatbot />
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev';
	
	try {
		// Use a direct fetch instead of graphql-request to avoid the document issue
		const response = await fetch(GQL_ENDPOINT, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				query: `
					query PostsByPublication($host: String!, $first: Int!, $after: String) {
						publication(host: $host) {
							id
							title
							displayTitle
							url
							descriptionSEO
							author {
								name
								profilePicture
							}
							posts(first: $first, after: $after) {
								totalDocuments
								edges {
									node {
										id
										title
										brief
										slug
										publishedAt
										coverImage {
											url
										}
										author {
											name
											profilePicture
										}
									}
								}
								pageInfo {
									endCursor
									hasNextPage
								}
							}
							preferences {
								logo
							}
							followersCount
							isTeam
							favicon
							ogMetaData {
								image
							}
						}
					}
				`,
				variables: {
					host: host,
					first: 10,
				},
			}),
		});

		const data = await response.json();
		const publication = data.data?.publication;
		
		if (!publication) {
			return {
				notFound: true,
			};
		}
		
		const initialAllPosts = publication.posts.edges.map((edge: any) => edge.node);

		return {
			props: {
				publication,
				initialAllPosts,
				initialPageInfo: publication.posts.pageInfo,
				initialTotalPosts: publication.posts.totalDocuments,
			},
			revalidate: 1,
		};
	} catch (error) {
		console.error('Error fetching blog data:', error);
		// Return a fallback response to prevent the build from failing
		return {
			props: {
				publication: {
					id: '67a1884c4dc993328a8c454c',
					title: 'John Schibelli',
					displayTitle: 'John Schibelli',
					descriptionSEO: 'Senior Front-End Developer with 15+ years of experience',
					url: 'https://mindware.hashnode.dev',
					posts: {
						edges: [],
						pageInfo: {
							hasNextPage: false,
							endCursor: null,
						},
						totalDocuments: 0
					},
					preferences: {
						logo: null
					},
					author: {
						name: 'John Schibelli',
						profilePicture: null
					},
					followersCount: 0,
					isTeam: false,
					favicon: null,
					ogMetaData: {
						image: null
					}
				} as any,
				initialAllPosts: [],
				initialPageInfo: {
					hasNextPage: false,
					endCursor: null,
				},
				initialTotalPosts: 0,
			},
			revalidate: 1,
		};
	}
};
