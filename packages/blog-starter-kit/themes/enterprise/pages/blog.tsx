import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { ArticleSVG } from '../components/icons';
import { Layout } from '../components/layout';
import { SocialLinks } from '../components/social-links';

import ModernHeader from '../components/modern-header';
import ModernHero from '../components/modern-hero';
import ModernPostCard from '../components/modern-post-card';
import FeaturedPostCard from '../components/featured-post-card';
import NewsletterCTA from '../components/newsletter-cta';

import {
	PageInfo,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
import { DEFAULT_COVER } from '../utils/const';

const SubscribeForm = dynamic(() =>
	import('../components/subscribe-form').then((mod) => mod.SubscribeForm),
);

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialAllPosts: PostFragment[];
	initialPageInfo: PageInfo;
	initialTotalPosts: number;
};

export default function Index({ publication, initialAllPosts, initialPageInfo, initialTotalPosts }: Props) {
	const [allPosts] = useState<PostFragment[]>(initialAllPosts);
	const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

	// Intersection Observer for scroll animations
	useEffect(() => {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						setVisibleSections(prev => new Set([...prev, entry.target.id]));
					}
				});
			},
			{ 
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			}
		);

		// Observe all sections
		const sections = document.querySelectorAll('[data-animate-section]');
		sections.forEach((section) => {
			observer.observe(section);
		});

		return () => {
			sections.forEach((section) => {
				observer.unobserve(section);
			});
		};
	}, []);

	const morePosts = allPosts.slice(4);

	const isSectionVisible = (sectionId: string) => visibleSections.has(sectionId);

	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>
						{publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta
						property="twitter:title"
						content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					/>
					<meta
						property="twitter:description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<ModernHeader publication={publication} />
				
				{/* Modern Hero Section */}
				{allPosts.length > 0 && (
					<div 
						id="hero-section"
						data-animate-section
						className={`transition-all duration-1000 ease-out ${
							isSectionVisible('hero-section') 
								? 'opacity-100 translate-y-0' 
								: 'opacity-0 translate-y-8'
						}`}
					>
						<ModernHero
							title="The Developer's Lens"
							subtitle="Technology & Development"
							description="Unfiltered perspectives on code, creativity, and the constant evolution of technology."
							ctaText="Read Latest Post"
							ctaLink={`/${allPosts[0].slug}`}
							imageUrl="/assets/hero/hero-image.webp"
						/>
					</div>
				)}

				<Container className="flex flex-col items-stretch gap-10 px-5 pb-10">
					{/* Social Links Section */}
					<div 
						id="social-links-section"
						data-animate-section
						className={`transition-all duration-700 ease-out ${
							isSectionVisible('social-links-section') 
								? 'opacity-100 translate-y-0' 
								: 'opacity-0 translate-y-6'
						}`}
					>
						<div className="flex justify-center">
							<SocialLinks />
						</div>
					</div>

					{/* Empty State */}
					{allPosts.length === 0 && (
						<div 
							id="empty-state-section"
							data-animate-section
							className={`grid grid-cols-1 py-20 lg:grid-cols-3 transition-all duration-800 ease-out ${
								isSectionVisible('empty-state-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<div className="col-span-1 flex flex-col items-center gap-5 text-center text-stone-700 dark:text-stone-400 lg:col-start-2">
								<div className="w-20 animate-fade-in-up">
									<ArticleSVG clasName="stroke-current" />
								</div>
								<p className="text-xl font-semibold animate-fade-in-up animation-delay-200">
									Hang tight! We&apos;re drafting the first article.
								</p>
							</div>
						</div>
					)}

					{/* Featured Post Section */}
					{allPosts.length > 0 && (
						<div 
							id="featured-section"
							data-animate-section
							className={`space-y-12 transition-all duration-900 ease-out ${
								isSectionVisible('featured-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							{/* Featured Post */}
							<div className="space-y-6">
								<div className="flex items-center gap-3 animate-fade-in-up">
									<h2 className="text-2xl font-bold text-stone-900 dark:text-stone-100">Featured Post</h2>
									<div className="px-3 py-1 bg-stone-100 dark:bg-stone-800 text-stone-700 dark:text-stone-300 text-sm font-medium rounded-full animate-fade-in-up animation-delay-200">
										Featured
									</div>
								</div>
								<div className="w-full animate-fade-in-up animation-delay-300">
									<FeaturedPostCard
										title={allPosts[0].title}
										excerpt={allPosts[0].brief}
										coverImage={allPosts[0].coverImage?.url || DEFAULT_COVER}
										date={allPosts[0].publishedAt}
										slug={allPosts[0].slug}
										readTime="5 min read"
										tags={["Featured", "Technology", "Insights"]}
									/>
								</div>
							</div>

							{/* Latest Posts Grid */}
							{allPosts.length > 1 && (
								<div 
									id="latest-posts-section"
									data-animate-section
									className={`space-y-6 transition-all duration-1000 ease-out ${
										isSectionVisible('latest-posts-section') 
											? 'opacity-100 translate-y-0' 
											: 'opacity-0 translate-y-8'
									}`}
								>
									<h2 className="text-2xl font-bold text-stone-900 dark:text-stone-100 animate-fade-in-up">Latest Posts</h2>
									<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
										{allPosts.slice(1, 4).map((post, index) => (
											<div 
												key={post.id}
												className={`animate-fade-in-up transition-all duration-300 hover:scale-[1.02] ${
													index === 0 ? 'animation-delay-200' :
													index === 1 ? 'animation-delay-300' :
													'animation-delay-400'
												}`}
											>
												<ModernPostCard
													title={post.title}
													excerpt={post.brief}
													coverImage={post.coverImage?.url || DEFAULT_COVER}
													date={post.publishedAt}
													slug={post.slug}
													readTime="3 min read"
													tags={["Technology", "Development"]}
												/>
											</div>
										))}
									</div>
								</div>
							)}
						</div>
					)}

					{/* Newsletter CTA Section */}
					{allPosts.length > 0 && (
						<div 
							id="newsletter-section"
							data-animate-section
							className={`py-8 transition-all duration-1100 ease-out ${
								isSectionVisible('newsletter-section') 
									? 'opacity-100 translate-y-0' 
									: 'opacity-0 translate-y-8'
							}`}
						>
							<NewsletterCTA 
								title="Stay updated with our newsletter"
								showNewsletterForm={true}
								className="py-16"
							/>
						</div>
					)}




				</Container>
				<Footer />
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 10,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialAllPosts = publication.posts.edges.map((edge) => edge.node);

	return {
		props: {
			publication,
			initialAllPosts,
			initialPageInfo: publication.posts.pageInfo,
			initialTotalPosts: publication.posts.totalDocuments,
		},
		revalidate: 1,
	};
};
