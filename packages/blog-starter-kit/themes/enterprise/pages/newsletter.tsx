import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import Head from 'next/head';
import { useState, useEffect } from 'react';
import request from 'graphql-request';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Layout } from '../components/layout';
import ModernHeader from '../components/modern-header';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Glow from '@/components/ui/glow';
import { 
  PublicationByHostDocument,
  PublicationByHostQueryVariables,
  PublicationFragment,
  SubscribeToNewsletterDocument,
  SubscribeToNewsletterMutation,
  SubscribeToNewsletterMutationVariables,
  SubscribeToNewsletterPayload
} from '../generated/graphql';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
  publication: PublicationFragment;
  recentPosts?: any[];
};

export default function NewsletterPage({ publication, recentPosts }: Props) {
  const [status, setStatus] = useState<SubscribeToNewsletterPayload['status']>();
  const [requestInProgress, setRequestInProgress] = useState(false);
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

  // Intersection Observer for scroll animations
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setVisibleSections(prev => new Set([...prev, entry.target.id]));
          }
        });
      },
      { 
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      }
    );

    // Observe all sections
    const sections = document.querySelectorAll('[data-animate-section]');
    sections.forEach((section) => {
      observer.observe(section);
    });

    return () => {
      sections.forEach((section) => {
        observer.unobserve(section);
      });
    };
  }, []);

  const isSectionVisible = (sectionId: string) => visibleSections.has(sectionId);

  const subscribe = async () => {
    if (!email.trim()) {
      setError('Please enter a valid email address');
      return;
    }

    setRequestInProgress(true);
    setError('');

    try {
      const data = await request<
        SubscribeToNewsletterMutation,
        SubscribeToNewsletterMutationVariables
      >(GQL_ENDPOINT, SubscribeToNewsletterDocument, {
        input: { publicationId: publication.id, email },
      });
      
      setStatus(data.subscribeToNewsletter.status);
      setEmail('');
    } catch (error: any) {
      const message = error.response?.errors?.[0]?.message || 'Something went wrong. Please try again.';
      setError(message);
    } finally {
      setRequestInProgress(false);
    }
  };

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
    if (error) setError('');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      subscribe();
    }
  };

  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>
            Newsletter - {publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
          </title>
          <meta
            name="description"
            content={`Subscribe to ${publication.displayTitle || publication.title}'s newsletter for the latest updates and insights.`}
          />
          <meta property="twitter:card" content="summary_large_image" />
          <meta
            property="twitter:title"
            content={`Newsletter - ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="twitter:description"
            content={`Subscribe to ${publication.displayTitle || publication.title}'s newsletter for the latest updates and insights.`}
          />
          <meta
            property="og:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <meta
            property="twitter:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify(addPublicationJsonLd(publication)),
            }}
          />
        </Head>
        
        <ModernHeader publication={publication} />
        
        <Container className="flex flex-col items-stretch gap-10 px-5 pb-10">
          {/* Hero Section */}
          <div 
            id="newsletter-hero-section"
            data-animate-section
            className={`py-16 transition-all duration-1000 ease-out ${
              isSectionVisible('newsletter-hero-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="mx-auto max-w-4xl text-center">
              <div className="animate-fade-in-up">
                <Badge variant="secondary" className="mb-4 bg-primary/10 text-primary">
                  Newsletter
                </Badge>
              </div>
              <h1 className={`text-4xl font-bold tracking-tight sm:text-6xl mb-6 animate-fade-in-up animation-delay-200 ${
                isSectionVisible('newsletter-hero-section') 
                  ? 'opacity-100 translate-y-0' 
                  : 'opacity-0 translate-y-4'
              }`}>
                Stay Updated
              </h1>
              <p className={`text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed animate-fade-in-up animation-delay-300 ${
                isSectionVisible('newsletter-hero-section') 
                  ? 'opacity-100 translate-y-0' 
                  : 'opacity-0 translate-y-4'
              }`}>
                Get the latest insights, tutorials, and updates delivered directly to your inbox. 
                Join our community of developers and tech enthusiasts.
              </p>
            </div>
          </div>

          {/* Newsletter Subscription Card */}
          <div 
            id="newsletter-subscription-section"
            data-animate-section
            className={`transition-all duration-900 ease-out ${
              isSectionVisible('newsletter-subscription-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="relative mx-auto max-w-4xl">
              <Glow variant="center" className="opacity-30" />
              <Card className="relative border-border/50 bg-gradient-to-br from-background to-muted/20 backdrop-blur-sm">
                <CardHeader className="text-center pb-4">
                  <CardTitle className={`text-3xl font-bold animate-fade-in-up animation-delay-200 ${
                    isSectionVisible('newsletter-subscription-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Subscribe to Our Newsletter
                  </CardTitle>
                  <p className={`text-muted-foreground text-lg animate-fade-in-up animation-delay-300 ${
                    isSectionVisible('newsletter-subscription-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Never miss out on our latest posts and updates. Subscribe to get notified when we publish new content.
                  </p>
                </CardHeader>
                
                <CardContent className="space-y-6">
                  {!status ? (
                    <>
                      <div className={`flex flex-col gap-4 sm:flex-row animate-fade-in-up animation-delay-400 ${
                        isSectionVisible('newsletter-subscription-section') 
                          ? 'opacity-100 translate-y-0' 
                          : 'opacity-0 translate-y-4'
                      }`}>
                        <input
                          type="email"
                          value={email}
                          onChange={handleEmailChange}
                          onKeyPress={handleKeyPress}
                          placeholder="Enter your email address"
                          className="flex-1 rounded-md border border-input bg-background px-4 py-3 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 transition-all duration-300 hover:border-primary/50 focus:border-primary"
                          disabled={requestInProgress}
                        />
                        <Button 
                          onClick={subscribe}
                          disabled={requestInProgress || !email.trim()}
                          className="group w-full sm:w-auto transition-all duration-300 hover:scale-105 hover:shadow-lg px-8 py-3"
                        >
                          {requestInProgress ? (
                            <div className="flex items-center gap-2">
                              <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                              Subscribing...
                            </div>
                          ) : (
                            <span className="transition-all duration-300 group-hover:translate-x-1">
                              Subscribe
                            </span>
                          )}
                        </Button>
                      </div>
                      
                      {error && (
                        <div className={`text-red-600 text-sm text-center bg-red-50 dark:bg-red-900/20 p-3 rounded-md animate-fade-in-up animation-delay-500 ${
                          isSectionVisible('newsletter-subscription-section') 
                            ? 'opacity-100 translate-y-0' 
                            : 'opacity-0 translate-y-4'
                        }`}>
                          {error}
                        </div>
                      )}
                      
                      <p className={`text-xs text-muted-foreground text-center animate-fade-in-up animation-delay-600 ${
                        isSectionVisible('newsletter-subscription-section') 
                          ? 'opacity-100 translate-y-0' 
                          : 'opacity-0 translate-y-4'
                      }`}>
                        No spam, unsubscribe at any time. We respect your privacy.
                      </p>
                    </>
                  ) : status === 'PENDING' ? (
                    <div className={`text-center space-y-4 animate-fade-in-up animation-delay-400 ${
                      isSectionVisible('newsletter-subscription-section') 
                        ? 'opacity-100 translate-y-0' 
                        : 'opacity-0 translate-y-4'
                    }`}>
                      <div className="mx-auto w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center">
                        <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold text-green-600 mb-2">
                          Almost there!
                        </h3>
                        <p className="text-muted-foreground">
                          We&apos;ve sent a confirmation email to your inbox. Please check your email and click the confirmation link to complete your subscription.
                        </p>
                      </div>
                    </div>
                  ) : null}
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Benefits Section */}
          <div 
            id="newsletter-benefits-section"
            data-animate-section
            className={`transition-all duration-1100 ease-out ${
              isSectionVisible('newsletter-benefits-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="mx-auto max-w-6xl">
              <div className="grid gap-8 md:grid-cols-3">
                <div className={`text-center space-y-4 animate-fade-in-up animation-delay-200 ${
                  isSectionVisible('newsletter-benefits-section') 
                    ? 'opacity-100 translate-y-0' 
                    : 'opacity-0 translate-y-4'
                }`}>
                  <div className="mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <svg className="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold">Weekly Updates</h3>
                  <p className="text-muted-foreground">
                    Get curated content delivered to your inbox every week, so you never miss the latest insights.
                  </p>
                </div>
                
                <div className={`text-center space-y-4 animate-fade-in-up animation-delay-300 ${
                  isSectionVisible('newsletter-benefits-section') 
                    ? 'opacity-100 translate-y-0' 
                    : 'opacity-0 translate-y-4'
                }`}>
                  <div className="mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <svg className="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold">Exclusive Content</h3>
                  <p className="text-muted-foreground">
                    Access to subscriber-only content, early access to new features, and exclusive insights.
                  </p>
                </div>
                
                <div className={`text-center space-y-4 animate-fade-in-up animation-delay-400 ${
                  isSectionVisible('newsletter-benefits-section') 
                    ? 'opacity-100 translate-y-0' 
                    : 'opacity-0 translate-y-4'
                }`}>
                  <div className="mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <svg className="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold">Community Access</h3>
                  <p className="text-muted-foreground">
                    Join our community of developers and tech enthusiasts. Connect, learn, and grow together.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Recent Posts Preview */}
          {recentPosts && recentPosts.length > 0 && (
            <div 
              id="newsletter-posts-section"
              data-animate-section
              className={`transition-all duration-1200 ease-out ${
                isSectionVisible('newsletter-posts-section') 
                  ? 'opacity-100 translate-y-0' 
                  : 'opacity-0 translate-y-8'
              }`}
            >
              <div className="mx-auto max-w-6xl space-y-8">
                <div className="text-center">
                  <h2 className={`text-3xl font-bold mb-4 animate-fade-in-up animation-delay-200 ${
                    isSectionVisible('newsletter-posts-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Recent Posts
                  </h2>
                  <p className={`text-muted-foreground animate-fade-in-up animation-delay-300 ${
                    isSectionVisible('newsletter-posts-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Here&apos;s what you can expect in our newsletter
                  </p>
                </div>
                
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {recentPosts.slice(0, 6).map((post: any, index: number) => (
                    <div 
                      key={post.id} 
                      className={`group overflow-hidden transition-all duration-300 hover:shadow-lg hover:scale-[1.02] animate-fade-in-up ${
                        index === 0 ? 'animation-delay-400' :
                        index === 1 ? 'animation-delay-500' :
                        index === 2 ? 'animation-delay-600' :
                        index === 3 ? 'animation-delay-700' :
                        index === 4 ? 'animation-delay-800' :
                        'animation-delay-900'
                      }`}
                    >
                      <Card className="h-full">
                        <div className="p-6">
                          <div className="flex items-center gap-2 mb-3">
                            <Badge variant="outline" className="text-xs">
                              {post.publishedAt ? new Date(post.publishedAt).toLocaleDateString() : 'Recent'}
                            </Badge>
                          </div>
                          <h3 className="font-semibold mb-2 group-hover:text-primary transition-colors">
                            {post.title}
                          </h3>
                          <p className="text-sm text-muted-foreground line-clamp-3">
                            {post.brief}
                          </p>
                        </div>
                      </Card>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </Container>
        
        <Footer />
      </Layout>
    </AppProvider>
  );
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST;

  try {
    const data = await request<{ publication: PublicationFragment }, PublicationByHostQueryVariables>(
      GQL_ENDPOINT,
      PublicationByHostDocument,
      {
        host,
      }
    );

    if (!data.publication) {
      return {
        notFound: true,
      };
    }

    return {
      props: {
        publication: data.publication,
        recentPosts: [], // We'll fetch recent posts separately if needed
      },
    };
  } catch (error) {
    console.error('Error fetching newsletter data:', error);
    return {
      notFound: true,
    };
  }
}; 