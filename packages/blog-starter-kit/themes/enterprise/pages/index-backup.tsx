import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { 
	PublicationFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
} from '../generated/graphql';

// Import all the new components
import Hero from '../components/hero';
import Intro from '../components/intro';
import FeaturedProjects from '../components/featured-projects';
import SkillsTicker from '../components/skills-ticker';
import CTABanner from '../components/cta-banner';
import LatestPosts from '../components/latest-posts';

// Import navigation and footer
import ModernHeader from '../components/modern-header';
import { Footer } from '../components/footer';
import { AppProvider } from '../components/contexts/appContext';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/';

type Props = {
	publication: PublicationFragment;
	recentPosts: PostFragment[];
};

export default function Home({ publication, recentPosts }: Props) {
	return (
		<AppProvider publication={publication}>
			<Head>
				<title>
					{publication.displayTitle || publication.title || 'John Schibelli - Senior Front-End Developer'}
				</title>
				<meta
					name="description"
					content={
						publication.descriptionSEO || "Senior Front-End Developer specializing in React, Next.js, TypeScript, and AI-driven development. Available for freelance and consulting projects."
					}
				/>
				<meta property="twitter:card" content="summary_large_image" />
				<meta
					property="twitter:title"
					content={publication.displayTitle || publication.title || 'John Schibelli - Senior Front-End Developer'}
				/>
				<meta
					property="twitter:description"
					content={
						publication.descriptionSEO || "Senior Front-End Developer specializing in React, Next.js, TypeScript, and AI-driven development."
					}
				/>
				<meta property="twitter:image" content={getAutogeneratedPublicationOG(publication)} />
				<meta property="og:image" content={getAutogeneratedPublicationOG(publication)} />
				<meta property="og:image:width" content="1200" />
				<meta property="og:image:height" content="630" />
				<meta property="og:title" content={publication.displayTitle || publication.title} />
				<meta property="og:description" content={publication.descriptionSEO || publication.title} />
				<meta property="og:type" content="website" />
				<meta property="og:url" content={publication.url} />
				<link rel="canonical" href={publication.url} />
				<script
					type="application/ld+json"
					dangerouslySetInnerHTML={{
						__html: JSON.stringify(addPublicationJsonLd(publication)),
					}}
				/>
			</Head>

			{/* Navigation */}
			<ModernHeader publication={publication} />

			{/* Homepage Sections in order */}
			<main>
				{/* 1. Hero Section */}
				<Hero />

				{/* 2. Intro Section */}
				<Intro />

				{/* 3. Featured Projects */}
				<FeaturedProjects />

				{/* 4. Skills & Tools Ticker */}
				<SkillsTicker />

				{/* 5. CTA Banner */}
				<CTABanner />

				{/* 6. Latest Posts Teaser */}
				<LatestPosts />
			</main>

			{/* Footer */}
			<Footer />
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev';
	
	try {
		const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			PostsByPublicationDocument,
			{
				first: 0,
				host: host,
			},
		);

		const publication = data.publication;
		if (!publication) {
			return {
				notFound: true,
			};
		}

		return {
			props: {
				publication,
				recentPosts: [],
			},
			revalidate: 1,
		};
	} catch (error) {
		console.error('Error fetching publication data:', error);
		// Return a fallback response to prevent the build from failing
		return {
			props: {
				publication: {
					id: 'fallback',
					title: 'John Schibelli',
					displayTitle: 'John Schibelli',
					descriptionSEO: 'Senior Front-End Developer with 15+ years of experience',
					url: 'https://mindware.hashnode.dev',
					posts: {
						totalDocuments: 0
					},
					preferences: {
						logo: null
					},
					author: {
						name: 'John Schibelli',
						profilePicture: null
					},
					followersCount: 0,
					isTeam: false,
					favicon: null,
					ogMetaData: {
						image: null
					}
				} as any,
				recentPosts: [],
			},
			revalidate: 1,
		};
	}
};
