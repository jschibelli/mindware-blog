import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Layout } from '../components/layout';
import ModernHeader from '../components/modern-header';
import { Section } from '@/components/ui/section';
import { Badge } from '@/components/ui/badge';
import Glow from '@/components/ui/glow';
import CaseStudyCard from '../components/portfolio/CaseStudyCard';
import CaseStudyCardSimple from '../components/portfolio/CaseStudyCardSimple';
import { usePortfolioData } from '../lib/hooks/usePortfolioData';
import { 
  PublicationByHostDocument,
  PublicationByHostQueryVariables,
  PublicationFragment
} from '../generated/graphql';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
  publication: PublicationFragment;
};

export default function PortfolioPage({ publication }: Props) {
  const portfolioItems = usePortfolioData();
  const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

  // Intersection Observer for scroll animations
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setVisibleSections(prev => new Set([...prev, entry.target.id]));
          }
        });
      },
      { 
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      }
    );

    // Observe all sections
    const sections = document.querySelectorAll('[data-animate-section]');
    sections.forEach((section) => {
      observer.observe(section);
    });

    return () => {
      sections.forEach((section) => {
        observer.unobserve(section);
      });
    };
  }, []);

  const isSectionVisible = (sectionId: string) => visibleSections.has(sectionId);

  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>
            Portfolio - {publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
          </title>
          <meta
            name="description"
            content="Case studies and recent projects I've built or contributed to. Explore my work in web development, React, Next.js, and modern frontend technologies."
          />
          <meta property="twitter:card" content="summary_large_image" />
          <meta
            property="twitter:title"
            content={`Portfolio - ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="twitter:description"
            content="Case studies and recent projects I've built or contributed to. Explore my work in web development, React, Next.js, and modern frontend technologies."
          />
          <meta
            property="og:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <meta
            property="twitter:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify(addPublicationJsonLd(publication)),
            }}
          />
        </Head>
        
        <ModernHeader publication={publication} />
        
        <Container className="flex flex-col items-stretch gap-10 px-5 pb-10">
          {/* Page Header */}
          <Section 
            id="portfolio-header-section"
            data-animate-section
            className={`py-16 transition-all duration-1000 ease-out ${
              isSectionVisible('portfolio-header-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="mx-auto max-w-4xl text-center">
              <div className="animate-fade-in-up">
                <Badge variant="secondary" className="mb-4 bg-primary/10 text-primary">
                  Portfolio
                </Badge>
              </div>
              <h1 className={`text-4xl font-bold tracking-tight sm:text-6xl mb-6 animate-fade-in-up animation-delay-200 ${
                isSectionVisible('portfolio-header-section') 
                  ? 'opacity-100 translate-y-0' 
                  : 'opacity-0 translate-y-4'
              }`}>
                Portfolio
              </h1>
              <p className={`text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed animate-fade-in-up animation-delay-300 ${
                isSectionVisible('portfolio-header-section') 
                  ? 'opacity-100 translate-y-0' 
                  : 'opacity-0 translate-y-4'
              }`}>
                Case studies and recent projects I've built or contributed to
              </p>
            </div>
          </Section>

          {/* Portfolio Grid */}
          <Section 
            id="portfolio-grid-section"
            data-animate-section
            className={`transition-all duration-1100 ease-out ${
              isSectionVisible('portfolio-grid-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="mx-auto max-w-7xl">
              <div className="grid gap-8 md:grid-cols-2 2xl:grid-cols-3">
                {portfolioItems.map((item, index) => (
                  <CaseStudyCard 
                    key={item.id} 
                    item={item} 
                    index={index}
                  />
                ))}
              </div>
            </div>
          </Section>

          {/* Call to Action */}
          <Section 
            id="portfolio-cta-section"
            data-animate-section
            className={`transition-all duration-1200 ease-out ${
              isSectionVisible('portfolio-cta-section') 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-8'
            }`}
          >
            <div className="mx-auto max-w-4xl text-center">
              <div className="relative">
                <Glow variant="center" className="opacity-30" />
                <div className={`relative bg-gradient-to-br from-background to-muted/20 backdrop-blur-sm border border-border/50 rounded-2xl p-8 animate-fade-in-up animation-delay-200 ${
                  isSectionVisible('portfolio-cta-section') 
                    ? 'opacity-100 translate-y-0' 
                    : 'opacity-0 translate-y-4'
                }`}>
                  <h2 className={`text-2xl font-bold mb-4 animate-fade-in-up animation-delay-300 ${
                    isSectionVisible('portfolio-cta-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Let's Build Something Amazing Together
                  </h2>
                  <p className={`text-muted-foreground mb-6 animate-fade-in-up animation-delay-400 ${
                    isSectionVisible('portfolio-cta-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    Ready to start your next project? I'm always excited to work on new challenges and bring ideas to life.
                  </p>
                  <div className={`flex flex-col sm:flex-row gap-4 justify-center animate-fade-in-up animation-delay-500 ${
                    isSectionVisible('portfolio-cta-section') 
                      ? 'opacity-100 translate-y-0' 
                      : 'opacity-0 translate-y-4'
                  }`}>
                    <a
                      href="mailto:hello@example.com"
                      className="inline-flex items-center justify-center px-6 py-3 text-sm font-medium text-white bg-primary hover:bg-primary/90 rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg"
                    >
                      Get In Touch
                    </a>
                    <a
                      href="/about"
                      className="inline-flex items-center justify-center px-6 py-3 text-sm font-medium text-foreground bg-background border border-border hover:bg-muted rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg"
                    >
                      Learn More About Me
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </Section>
        </Container>
        
        <Footer />
      </Layout>
    </AppProvider>
  );
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST;

  try {
    const data = await request<{ publication: PublicationFragment }, PublicationByHostQueryVariables>(
      GQL_ENDPOINT,
      PublicationByHostDocument,
      {
        host,
      }
    );

    if (!data.publication) {
      return {
        notFound: true,
      };
    }

    return {
      props: {
        publication: data.publication,
      },
    };
  } catch (error) {
    console.error('Error fetching portfolio data:', error);
    return {
      notFound: true,
    };
  }
}; 