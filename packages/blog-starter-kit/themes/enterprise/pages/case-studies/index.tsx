import React from 'react';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import request from 'graphql-request';

import { Container } from '../../components/shared/container';
import { AppProvider } from '../../components/contexts/appContext';
import { Footer } from '../../components/shared/footer';
import { Layout } from '../../components/shared/layout';
import ModernHeader from '../../components/features/navigation/modern-header';
import { Section } from '../../components/ui/section';
import { Badge } from '../../components/ui/badge';
import { Button } from '../../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { 
  PublicationByHostDocument,
  PublicationByHostQueryVariables,
  PublicationFragment,
  TagPostsByPublicationDocument,
  PostFragment
} from '../../generated/graphql';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import { siteConfig } from '../../config/site';
import localCaseStudies from '../../data/case-studies.json';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
  publication: PublicationFragment;
  caseStudies: PostFragment[];
};

export default function CaseStudiesPage({ publication, caseStudies }: Props) {
  const [prefersReducedMotion, setPrefersReducedMotion] = React.useState(false);

  React.useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);

    const handleChange = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches);
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  const containerVariants = {
    hidden: prefersReducedMotion ? { opacity: 0 } : { opacity: 0 },
    visible: prefersReducedMotion ? { opacity: 1 } : {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: prefersReducedMotion ? { opacity: 0 } : { 
      opacity: 0, 
      y: 20 
    },
    visible: prefersReducedMotion ? { opacity: 1 } : {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>
            Case Studies – {publication.displayTitle || publication.title}
          </title>
          <meta
            name="description"
            content="Explore detailed case studies showcasing real-world solutions, technical implementations, and business outcomes."
          />
          <meta property="twitter:card" content="summary_large_image" />
          <meta
            property="twitter:title"
            content={`Case Studies – ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="twitter:description"
            content="Explore detailed case studies showcasing real-world solutions, technical implementations, and business outcomes."
          />
          <meta
            property="og:title"
            content={`Case Studies – ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="og:description"
            content="Explore detailed case studies showcasing real-world solutions, technical implementations, and business outcomes."
          />
          <meta
            property="og:image"
            content={getAutogeneratedPublicationOG(publication)}
          />
          <meta
            property="twitter:image"
            content={getAutogeneratedPublicationOG(publication)}
          />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify(addPublicationJsonLd(publication)),
            }}
          />
        </Head>
        
        <ModernHeader publication={publication} />

        <main className="min-h-screen">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="py-8 md:py-12"
          >
            <Container>
              {/* Page Header */}
              <motion.div variants={itemVariants} className="mb-12">
                <Section className="text-center">
                  <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent mb-6">
                    Case Studies
                  </h1>
                  <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                    Explore detailed case studies showcasing real-world solutions, technical implementations, and business outcomes.
                  </p>
                </Section>
              </motion.div>

              {/* Local Case Studies Grid */}
              <motion.div variants={itemVariants} className="mb-12">
                {(localCaseStudies as any).length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {(localCaseStudies as any).map((cs: any) => (
                      <motion.div key={cs.id} variants={itemVariants} className="group">
                        <Card className="h-full transition-all duration-300 hover:shadow-lg hover:scale-[1.02] border-border/50 hover:border-primary/30">
                          <CardHeader className="pb-4">
                            {cs.image && (
                              <div className="relative overflow-hidden rounded-lg mb-4 aspect-video">
                                <img
                                  src={cs.image}
                                  alt={`Cover image for ${cs.title}`}
                                  className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                  loading="lazy"
                                />
                              </div>
                            )}
                            <CardTitle className="text-xl font-bold line-clamp-2 group-hover:text-primary transition-colors duration-200">
                              {cs.title}
                            </CardTitle>
                            <CardDescription className="line-clamp-3 text-muted-foreground">
                              {cs.description}
                            </CardDescription>
                          </CardHeader>
                          <CardContent className="pt-0">
                            <Button asChild variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors duration-200">
                              <Link href={`/case-studies/${cs.slug}`}>
                                Read Case Study
                                <svg className="w-4 h-4 ml-2 transition-transform duration-200 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                              </Link>
                            </Button>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </div>
                ) : null}
              </motion.div>

              {/* Remote Case Studies Grid (Hashnode) */}
              <motion.div variants={itemVariants} className="mb-12">
                {((localCaseStudies as any).length === 0 && caseStudies.length === 0) ? (
                  <div className="text-center py-12">
                    <div className="w-16 h-16 mx-auto mb-4 bg-primary/20 rounded-lg flex items-center justify-center">
                      <svg className="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-semibold text-foreground mb-2">No Case Studies Yet</h3>
                    <p className="text-muted-foreground">Check back soon for detailed case studies.</p>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {caseStudies.map((caseStudy, index) => (
                      <motion.div
                        key={caseStudy.id}
                        variants={itemVariants}
                        className="group"
                      >
                        <Card className="h-full transition-all duration-300 hover:shadow-lg hover:scale-[1.02] border-border/50 hover:border-primary/30">
                          <CardHeader className="pb-4">
                            {caseStudy.coverImage?.url && (
                              <div className="relative overflow-hidden rounded-lg mb-4 aspect-video">
                                <img
                                  src={caseStudy.coverImage.url}
                                  alt={`Cover image for ${caseStudy.title}`}
                                  className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                  loading="lazy"
                                />
                              </div>
                            )}
                            <CardTitle className="text-xl font-bold line-clamp-2 group-hover:text-primary transition-colors duration-200">
                              {caseStudy.title}
                            </CardTitle>
                            <CardDescription className="line-clamp-3 text-muted-foreground">
                              {caseStudy.brief}
                            </CardDescription>
                          </CardHeader>
                          <CardContent className="pt-0">
                            <div className="flex items-center justify-between mb-4">
                              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                {formatDate(caseStudy.publishedAt)}
                              </div>
                              {caseStudy.author && (
                                <div className="flex items-center gap-2">
                                  {caseStudy.author.profilePicture && (
                                    <img
                                      src={caseStudy.author.profilePicture}
                                      alt={caseStudy.author.name}
                                      className="w-6 h-6 rounded-full"
                                    />
                                  )}
                                  <span className="text-sm text-muted-foreground">
                                    {caseStudy.author.name}
                                  </span>
                                </div>
                              )}
                            </div>
                                                         <Button
                               asChild
                               variant="outline"
                               className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors duration-200"
                             >
                               <Link href={`/${caseStudy.slug}`}>
                                 Read Case Study
                                 <svg className="w-4 h-4 ml-2 transition-transform duration-200 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                 </svg>
                               </Link>
                             </Button>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </div>
                )}
              </motion.div>

              {/* CTA Section */}
              <motion.div variants={itemVariants} className="text-center">
                <Card className="bg-gradient-to-br from-primary/10 to-primary/5 border-primary/20">
                  <CardContent className="pt-6">
                    <h3 className="text-2xl font-bold text-foreground mb-4">
                      Have a Project in Mind?
                    </h3>
                    <p className="text-muted-foreground mb-6 max-w-2xl mx-auto">
                      Let&apos;s discuss how we can bring your vision to life with a custom solution tailored to your needs.
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                      <Button asChild size="lg">
                        <Link href="/contact">
                          Start a Project
                        </Link>
                      </Button>
                      <Button asChild variant="outline" size="lg">
                        <Link href="/work">
                          View Portfolio
                        </Link>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            </Container>
          </motion.div>
        </main>

        <Footer />
      </Layout>
    </AppProvider>
  );
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  // Fallback-friendly behavior: if Hashnode config is missing, provide stub data
  if (!GQL_ENDPOINT || !process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST) {
    const publication = {
      title: siteConfig.name,
      displayTitle: siteConfig.name,
      url: siteConfig.url,
      logo: null,
    } as unknown as PublicationFragment;

    return {
      props: {
        publication,
        caseStudies: [],
      },
      revalidate: 60,
    };
  }

  try {
    // Fetch publication data
    const publicationData = await request<{ publication: PublicationFragment }, PublicationByHostQueryVariables>(
      GQL_ENDPOINT,
      PublicationByHostDocument,
      {
        host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
      }
    );

    const publication = publicationData.publication;

    if (!publication) {
      return {
        props: {
          publication: {
            title: siteConfig.name,
            displayTitle: siteConfig.name,
            url: siteConfig.url,
            logo: null,
          } as unknown as PublicationFragment,
          caseStudies: [],
        },
        revalidate: 60,
      };
    }

    // Fetch case studies (posts tagged with 'case-study')
    const caseStudiesData = await request(
      GQL_ENDPOINT,
      TagPostsByPublicationDocument,
      {
        host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
        tagSlug: 'case-study',
        first: 50,
      }
    );

    const caseStudies = caseStudiesData.publication?.posts.edges?.map(edge => edge.node) || [];

    return {
      props: {
        publication,
        caseStudies,
      },
      revalidate: 60,
    };
  } catch (error) {
    console.error('Error fetching case studies data:', error);
    return {
      props: {
        publication: {
          title: siteConfig.name,
          displayTitle: siteConfig.name,
          url: siteConfig.url,
          logo: null,
        } as unknown as PublicationFragment,
        caseStudies: [],
      },
      revalidate: 60,
    };
  }
};
