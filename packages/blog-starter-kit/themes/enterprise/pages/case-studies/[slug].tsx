import React from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';

import { Container } from '../../components/container';
import { AppProvider } from '../../components/contexts/appContext';
import { Footer } from '../../components/footer';
import { Layout } from '../../components/layout';
import ModernHeader from '../../components/modern-header';
import { Section } from '@/components/ui/section';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { PortfolioItem } from '../../types/portfolio';
import portfolioData from '../../data/portfolio.json';
import { 
  PublicationByHostDocument,
  PublicationByHostQueryVariables,
  PublicationFragment
} from '../../generated/graphql';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
  publication: PublicationFragment;
  caseStudy: PortfolioItem;
};

export default function CaseStudyPage({ publication, caseStudy }: Props) {
  const [prefersReducedMotion, setPrefersReducedMotion] = React.useState(false);

  React.useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);

    const handleChange = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches);
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  const containerVariants = {
    hidden: prefersReducedMotion ? { opacity: 0 } : { opacity: 0 },
    visible: prefersReducedMotion ? { opacity: 1 } : {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: prefersReducedMotion ? { opacity: 0 } : { 
      opacity: 0, 
      y: 20 
    },
    visible: prefersReducedMotion ? { opacity: 1 } : {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  };

  const imageVariants = {
    hidden: prefersReducedMotion ? { opacity: 0 } : { 
      opacity: 0, 
      scale: 1.05 
    },
    visible: prefersReducedMotion ? { opacity: 1 } : {
      opacity: 1,
      scale: 1,
      transition: {
        duration: 0.8,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  };

  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>
            {caseStudy.title} – Portfolio | {publication.displayTitle || publication.title}
          </title>
          <meta
            name="description"
            content={caseStudy.description}
          />
          <meta property="twitter:card" content="summary_large_image" />
          <meta
            property="twitter:title"
            content={`${caseStudy.title} – Portfolio | ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="twitter:description"
            content={caseStudy.description}
          />
          <meta
            property="og:title"
            content={`${caseStudy.title} – Portfolio | ${publication.displayTitle || publication.title}`}
          />
          <meta
            property="og:description"
            content={caseStudy.description}
          />
          <meta
            property="og:image"
            content={caseStudy.image.startsWith('/') ? `${process.env.NEXT_PUBLIC_SITE_URL}${caseStudy.image}` : caseStudy.image}
          />
          <meta
            property="twitter:image"
            content={caseStudy.image.startsWith('/') ? `${process.env.NEXT_PUBLIC_SITE_URL}${caseStudy.image}` : caseStudy.image}
          />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify(addPublicationJsonLd(publication)),
            }}
          />
        </Head>
        
        <ModernHeader publication={publication} />

        <main className="min-h-screen">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="py-8 md:py-12"
          >
            <Container>
              {/* Back to Portfolio Link */}
              <motion.div variants={itemVariants} className="mb-6">
                <Button
                  asChild
                  variant="ghost"
                  size="sm"
                  className="group transition-all duration-300 hover:scale-105"
                >
                  <Link href="/portfolio" className="flex items-center gap-2">
                    <svg className="w-4 h-4 transition-transform duration-300 group-hover:-translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    Back to Portfolio
                  </Link>
                </Button>
              </motion.div>

              {/* Page Header */}
              <motion.div variants={itemVariants} className="mb-8">
                <Section className="text-center">
                  <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent mb-6">
                    {caseStudy.title}
                  </h1>
                  <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                    {caseStudy.description}
                  </p>
                </Section>
              </motion.div>

              {/* Project Image */}
              <motion.div variants={imageVariants} className="mb-8">
                <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-primary/10 to-primary/5 border border-border/50">
                  {caseStudy.image && caseStudy.image.startsWith('/') ? (
                    <img
                      src={caseStudy.image}
                      alt={`Screenshot of ${caseStudy.title}`}
                      className="w-full h-auto object-cover transition-transform duration-500 hover:scale-105"
                      loading="eager"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                        target.nextElementSibling?.classList.remove('hidden');
                      }}
                    />
                  ) : null}
                  <div className={`absolute inset-0 flex items-center justify-center ${caseStudy.image && caseStudy.image.startsWith('/') ? 'hidden' : ''}`}>
                    <div className="text-center">
                      <div className="w-16 h-16 mx-auto mb-4 bg-primary/20 rounded-lg flex items-center justify-center">
                        <svg className="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <p className="text-sm text-muted-foreground font-medium">{caseStudy.title}</p>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Tags */}
              <motion.div variants={itemVariants} className="mb-8">
                <div className="flex flex-wrap gap-3 justify-center">
                  {caseStudy.tags.map((tag) => (
                    <Badge
                      key={tag}
                      variant="secondary"
                      className="text-sm bg-primary/10 text-primary border-primary/20 hover:bg-primary/20 transition-colors duration-200"
                    >
                      {tag}
                    </Badge>
                  ))}
                </div>
              </motion.div>

              {/* Action Buttons */}
              <motion.div variants={itemVariants} className="flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto">
                {caseStudy.liveUrl && (
                  <Button
                    asChild
                    size="lg"
                    variant="outline"
                    className="group transition-all duration-300 hover:scale-105 hover:shadow-md"
                  >
                    <Link 
                      href={caseStudy.liveUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                      View Live
                    </Link>
                  </Button>
                )}
                
                {caseStudy.caseStudyUrl && caseStudy.caseStudyUrl.startsWith('http') && (
                  <Button
                    asChild
                    size="lg"
                    className="group transition-all duration-300 hover:scale-105 hover:shadow-md"
                  >
                    <Link 
                      href={caseStudy.caseStudyUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      Full Case Study
                    </Link>
                  </Button>
                )}
              </motion.div>
            </Container>
          </motion.div>
        </main>

        <Footer />
      </Layout>
    </AppProvider>
  );
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const { slug } = ctx.params as { slug: string };

  console.log('Looking for case study with slug:', slug);

  // Find the case study by slug
  const caseStudy = portfolioData.find((item: PortfolioItem) => item.slug === slug);

  console.log('Found case study:', caseStudy);

  if (!caseStudy) {
    console.log('Case study not found, returning 404');
    return {
      notFound: true,
    };
  }

  try {
    const data = await request<{ publication: PublicationFragment }, PublicationByHostQueryVariables>(
      GQL_ENDPOINT!,
      PublicationByHostDocument,
      {
        host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
      }
    );

    const publication = data.publication;

    if (!publication) {
      console.log('Publication not found, returning 404');
      return {
        notFound: true,
      };
    }

    console.log('Returning props with case study:', caseStudy.title);
    return {
      props: {
        publication,
        caseStudy,
      },
    };
  } catch (error) {
    console.error('Error fetching publication data:', error);
    return {
      notFound: true,
    };
  }
}; 