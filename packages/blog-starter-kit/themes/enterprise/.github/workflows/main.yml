name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, development ]

# Add explicit permissions for GitHub API access
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  security-events: write
  actions: read
  packages: read

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  PNPM_CACHE_PATH: ~/.pnpm-store
  WORKING_DIRECTORY: packages/blog-starter-kit/themes/enterprise

jobs:
  # Workflow Validation
  validate-workflow:
    name: Validate Workflow Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate environment variables
        run: |
          echo "Validating workflow environment variables..."
          echo "NODE_VERSION: ${{ env.NODE_VERSION }}"
          echo "PNPM_VERSION: ${{ env.PNPM_VERSION }}"
          echo "PNPM_CACHE_PATH: ${{ env.PNPM_CACHE_PATH }}"
          echo "WORKING_DIRECTORY: ${{ env.WORKING_DIRECTORY }}"
          
          # Validate required environment variables
          if [ -z "${{ env.NODE_VERSION }}" ]; then
            echo "‚ùå NODE_VERSION is not set"
            exit 1
          fi
          
          if [ -z "${{ env.PNPM_VERSION }}" ]; then
            echo "‚ùå PNPM_VERSION is not set"
            exit 1
          fi
          
          if [ -z "${{ env.WORKING_DIRECTORY }}" ]; then
            echo "‚ùå WORKING_DIRECTORY is not set"
            exit 1
          fi
          
          echo "‚úÖ All environment variables are valid"

  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: validate-workflow
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Verify pnpm cache
        run: |
          echo "Verifying pnpm cache configuration..."
          pnpm store path
          echo "Cache verification completed"
        
      - name: Run ESLint
        run: pnpm lint
        
      - name: Run TypeScript type check
        run: pnpm typecheck

  # Test
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Verify pnpm cache
        run: |
          echo "Verifying pnpm cache configuration..."
          pnpm store path
          echo "Cache verification completed"
        
      - name: Run tests
        run: pnpm test
        env:
          CI: true

  # Visual Regression Testing
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.modified, 'app/blog/') || contains(github.event.head_commit.modified, 'components/blog/') || contains(github.event.head_commit.modified, 'pages/blog') || contains(github.event.head_commit.modified, 'tests/visual/')
    permissions:
      contents: read
      issues: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Verify pnpm cache
        run: |
          echo "Verifying pnpm cache configuration..."
          pnpm store path
          echo "Cache verification completed"
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          pnpm build
        env:
          NEXT_PUBLIC_MODE: production
          NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT: ${{ secrets.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/' }}
          NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST: ${{ secrets.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev' }}
          NEXT_PUBLIC_FEATURE_SCHEDULING: 'true'
          NEXT_PUBLIC_FEATURE_CASE_STUDY: 'true'
          NEXT_PUBLIC_FEATURE_CLIENT_INTAKE: 'true'
          FEATURE_SCHEDULING: 'true'
          FEATURE_CASE_STUDY: 'true'
          FEATURE_CLIENT_INTAKE: 'true'
        
      - name: Run visual regression tests
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          pnpm test:visual
        env:
          CI: true
          
      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7
          
      - name: Upload visual test screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-screenshots
          path: ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7
          
      - name: Comment PR with visual test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if visual tests failed
            const testResultsPath = '${{ env.WORKING_DIRECTORY }}/test-results/';
            let hasFailures = false;
            let comment = '## üé® Visual Regression Test Results\n\n';
            
            try {
              if (fs.existsSync(testResultsPath)) {
                const files = fs.readdirSync(testResultsPath, { recursive: true });
                const diffFiles = files.filter(file => file.includes('diff') || file.includes('actual'));
                
                if (diffFiles.length > 0) {
                  hasFailures = true;
                  comment += '‚ùå **Visual differences detected!**\n\n';
                  comment += 'The following visual differences were found:\n\n';
                  
                  diffFiles.forEach(file => {
                    comment += `- \`${file}\`\n`;
                  });
                  
                  comment += '\nüì∏ **Screenshots and diffs are available in the artifacts above.**\n\n';
                  comment += '### Next Steps:\n';
                  comment += '1. Review the visual differences in the uploaded artifacts\n';
                  comment += '2. If the changes are intentional, update the baseline images\n';
                  comment += '3. If the changes are unintentional, fix the issues and push again\n\n';
                  comment += 'To update baseline images locally, run:\n';
                  comment += '```bash\n';
                  comment += 'pnpm test:visual:update\n';
                  comment += '```\n';
                } else {
                  comment += '‚úÖ **All visual tests passed!** No visual differences detected.\n';
                }
              } else {
                comment += '‚ö†Ô∏è **Visual test results not found.** Please check the test logs.\n';
              }
            } catch (error) {
              comment += '‚ùå **Error processing visual test results:** ' + error.message + '\n';
            }
            
            // Post comment to PR with proper error handling
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (apiError) {
              console.error('Failed to post comment:', apiError.message);
              // Don't fail the job if comment posting fails
            }
            
            // Fail the job if there are visual differences
            if (hasFailures) {
              core.setFailed('Visual regression tests failed - differences detected');
            }

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, visual-regression]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Verify pnpm cache
        run: |
          echo "Verifying pnpm cache configuration..."
          pnpm store path
          echo "Cache verification completed"
        
      - name: Build application
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          pnpm build
        env:
          # Production build environment
          NEXT_PUBLIC_MODE: production
          # Hashnode GraphQL (optional - will use fallback if not set)
          NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT: ${{ secrets.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/' }}
          NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST: ${{ secrets.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev' }}
          # Feature flags
          NEXT_PUBLIC_FEATURE_SCHEDULING: 'true'
          NEXT_PUBLIC_FEATURE_CASE_STUDY: 'true'
          NEXT_PUBLIC_FEATURE_CLIENT_INTAKE: 'true'
          FEATURE_SCHEDULING: 'true'
          FEATURE_CASE_STUDY: 'true'
          FEATURE_CLIENT_INTAKE: 'true'
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/.next
          retention-days: 7

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Vercel (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      actions: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./${{ env.WORKING_DIRECTORY }}
          vercel-args: '--prod'

  # Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    environment: preview
    permissions:
      contents: read
      actions: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./${{ env.WORKING_DIRECTORY }}
          vercel-args: '--target=preview'

  # Notify on Success/Failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "‚úÖ All checks passed! Deployment successful."
          
      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Some checks failed. Please review the logs."
