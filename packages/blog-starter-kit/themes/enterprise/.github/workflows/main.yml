name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, development ]

# Add explicit permissions for GitHub API access
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  security-events: write
  actions: read
  packages: read
  id-token: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  PNPM_CACHE_PATH: ~/.pnpm-store
  WORKING_DIRECTORY: packages/blog-starter-kit/themes/enterprise

jobs:
  # Workflow Validation
  validate-workflow:
    name: Validate Workflow Configuration
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate environment variables
        run: |
          echo "üîç Validating workflow environment variables..."
          echo "NODE_VERSION: ${{ env.NODE_VERSION }}"
          echo "PNPM_VERSION: ${{ env.PNPM_VERSION }}"
          echo "PNPM_CACHE_PATH: ${{ env.PNPM_CACHE_PATH }}"
          echo "WORKING_DIRECTORY: ${{ env.WORKING_DIRECTORY }}"
          
          # Validate required environment variables with detailed error messages
          if [ -z "${{ env.NODE_VERSION }}" ]; then
            echo "‚ùå NODE_VERSION is not set - this is required for Node.js setup"
            exit 1
          fi
          
          if [ -z "${{ env.PNPM_VERSION }}" ]; then
            echo "‚ùå PNPM_VERSION is not set - this is required for pnpm setup"
            exit 1
          fi
          
          if [ -z "${{ env.WORKING_DIRECTORY }}" ]; then
            echo "‚ùå WORKING_DIRECTORY is not set - this is required for build context"
            exit 1
          fi
          
          # Validate Node.js version format
          if ! echo "${{ env.NODE_VERSION }}" | grep -E '^[0-9]+(\.[0-9]+)*$' > /dev/null; then
            echo "‚ùå NODE_VERSION format is invalid. Expected format: '20' or '20.0.0'"
            exit 1
          fi
          
          # Validate pnpm version format
          if ! echo "${{ env.PNPM_VERSION }}" | grep -E '^[0-9]+(\.[0-9]+)*$' > /dev/null; then
            echo "‚ùå PNPM_VERSION format is invalid. Expected format: '8' or '8.0.0'"
            exit 1
          fi
          
          echo "‚úÖ All environment variables validated successfully"
          
      - name: Validate working directory exists
        run: |
          echo "üîç Validating working directory structure..."
          
          if [ ! -d "${{ env.WORKING_DIRECTORY }}" ]; then
            echo "‚ùå Working directory '${{ env.WORKING_DIRECTORY }}' does not exist"
            echo "Available directories:"
            find . -maxdepth 3 -type d -name "*" | head -20
            exit 1
          fi
          
          # Check for essential files
          if [ ! -f "${{ env.WORKING_DIRECTORY }}/package.json" ]; then
            echo "‚ùå package.json not found in working directory"
            exit 1
          fi
          
          if [ ! -f "${{ env.WORKING_DIRECTORY }}/next.config.js" ]; then
            echo "‚ùå next.config.js not found in working directory"
            exit 1
          fi
          
          echo "‚úÖ Working directory structure validated successfully"

  # Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: validate-workflow
    if: always() && needs.validate-workflow.result == 'success'
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies"
            echo "Check pnpm-lock.yaml and package.json for conflicts"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Run ESLint
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üîç Running ESLint..."
          pnpm lint
          if [ $? -ne 0 ]; then
            echo "‚ùå ESLint found issues that need to be fixed"
            echo "Run 'pnpm lint' locally to see detailed errors"
            exit 1
          fi
          echo "‚úÖ ESLint passed successfully"
        
      - name: Run TypeScript type check
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üîç Running TypeScript type check..."
          pnpm typecheck
          if [ $? -ne 0 ]; then
            echo "‚ùå TypeScript type check failed"
            echo "Run 'pnpm typecheck' locally to see detailed errors"
            exit 1
          fi
          echo "‚úÖ TypeScript type check passed successfully"

  # Test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate-workflow
    if: always() && needs.validate-workflow.result == 'success'
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Run tests
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üß™ Running test suite..."
          pnpm test --coverage --watchAll=false
          if [ $? -ne 0 ]; then
            echo "‚ùå Test suite failed"
            echo "Run 'pnpm test' locally to see detailed test results"
            exit 1
          fi
          echo "‚úÖ All tests passed successfully"
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage/
          retention-days: 7

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-workflow
    if: always() && needs.validate-workflow.result == 'success'
    permissions:
      contents: read
      actions: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for security scan..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies for security scan"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Run security audit
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üîí Running security audit..."
          pnpm audit --audit-level moderate
          if [ $? -ne 0 ]; then
            echo "‚ùå Security audit found vulnerabilities"
            echo "Run 'pnpm audit' locally to see detailed security issues"
            echo "Consider running 'pnpm audit --fix' to automatically fix issues"
            exit 1
          fi
          echo "‚úÖ Security audit passed successfully"
        
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-results
          path: ${{ env.WORKING_DIRECTORY }}/security-audit.json
          retention-days: 30

  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, security-scan]
    if: always() && (needs.lint-and-typecheck.result == 'success' && needs.test.result == 'success' && needs.security-scan.result == 'success')
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for build..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies for build"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Validate environment variables for build
        run: |
          echo "üîç Validating build environment variables..."
          
          # Check for required environment variables
          required_vars=(
            "NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT"
            "NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST"
          )
          
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "‚ö†Ô∏è  $var is not set, using default value"
            else
              echo "‚úÖ $var is set"
            fi
          done
          
          echo "‚úÖ Environment variable validation completed"
        
      - name: Build application
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üèóÔ∏è  Building application..."
          pnpm build
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            echo "Check the build logs above for specific errors"
            echo "Common issues:"
            echo "  - TypeScript errors"
            echo "  - Missing environment variables"
            echo "  - Import/export issues"
            exit 1
          fi
          echo "‚úÖ Build completed successfully"
        env:
          NEXT_PUBLIC_MODE: production
          NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT: ${{ secrets.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/' }}
          NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST: ${{ secrets.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev' }}
          NEXT_PUBLIC_FEATURE_SCHEDULING: 'true'
          NEXT_PUBLIC_FEATURE_CASE_STUDY: 'true'
          NEXT_PUBLIC_FEATURE_CLIENT_INTAKE: 'true'
          FEATURE_SCHEDULING: 'true'
          FEATURE_CASE_STUDY: 'true'
          FEATURE_CLIENT_INTAKE: 'true'
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIRECTORY }}/.next/
          retention-days: 7

  # Visual Regression Tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    permissions:
      contents: read
      actions: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for visual tests..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies for visual tests"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Run visual regression tests
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          echo "üé® Running visual regression tests..."
          pnpm test:visual
          if [ $? -ne 0 ]; then
            echo "‚ùå Visual regression tests failed"
            echo "Check the test results and update baseline images if changes are intentional"
            exit 1
          fi
          echo "‚úÖ Visual regression tests passed successfully"
        env:
          CI: true
          
      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7
          
      - name: Upload visual test screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-screenshots
          path: ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7
          
      - name: Comment PR with visual test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if visual tests failed
            const testResultsPath = '${{ env.WORKING_DIRECTORY }}/test-results/';
            let hasFailures = false;
            let comment = '## üé® Visual Regression Test Results\n\n';
            
            try {
              if (fs.existsSync(testResultsPath)) {
                const files = fs.readdirSync(testResultsPath, { recursive: true });
                const diffFiles = files.filter(file => file.includes('diff') || file.includes('actual'));
                
                if (diffFiles.length > 0) {
                  hasFailures = true;
                  comment += '‚ùå **Visual differences detected!**\n\n';
                  comment += 'The following visual differences were found:\n\n';
                  
                  diffFiles.forEach(file => {
                    comment += `- \`${file}\`\n`;
                  });
                  
                  comment += '\nüì∏ **Screenshots and diffs are available in the artifacts above.**\n\n';
                  comment += '### Next Steps:\n';
                  comment += '1. Review the visual differences in the uploaded artifacts\n';
                  comment += '2. If the changes are intentional, update the baseline images\n';
                  comment += '3. If the changes are unintentional, fix the issues and push again\n\n';
                  comment += 'To update baseline images locally, run:\n';
                  comment += '```bash\n';
                  comment += 'pnpm test:visual:update\n';
                  comment += '```\n';
                } else {
                  comment += '‚úÖ **All visual tests passed!** No visual differences detected.\n';
                }
              } else {
                comment += '‚ö†Ô∏è **Visual test results not found.** Please check the test logs.\n';
              }
            } catch (error) {
              console.error('Error reading visual test results:', error);
              comment += '‚ö†Ô∏è **Error reading visual test results.** Please check the test logs.\n';
            }
            
            // Post comment to PR with proper error handling
            try {
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  issue_number: context.payload.pull_request.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                console.log('‚úÖ Successfully posted visual test results comment');
              } else {
                console.log('‚ÑπÔ∏è Not a pull request, skipping comment posting');
              }
            } catch (apiError) {
              console.error('‚ùå Failed to post comment:', apiError.message);
              console.error('Error details:', JSON.stringify(apiError, null, 2));
              // Don't fail the job if comment posting fails
            }
            
            // Fail the job if there are visual differences
            if (hasFailures) {
              core.setFailed('Visual regression tests failed - differences detected');
            }

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, visual-tests]
    if: always() && needs.build.result == 'success' && (needs.visual-tests.result == 'success' || needs.visual-tests.result == 'skipped')
    permissions:
      contents: read
      actions: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_CACHE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for deployment..."
          pnpm install --frozen-lockfile
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install dependencies for deployment"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          NEXT_PUBLIC_MODE: production
          NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT: ${{ secrets.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT || 'https://gql.hashnode.com/' }}
          NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST: ${{ secrets.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST || 'mindware.hashnode.dev' }}
          NEXT_PUBLIC_FEATURE_SCHEDULING: 'true'
          NEXT_PUBLIC_FEATURE_CASE_STUDY: 'true'
          NEXT_PUBLIC_FEATURE_CLIENT_INTAKE: 'true'
          FEATURE_SCHEDULING: 'true'
          FEATURE_CASE_STUDY: 'true'
          FEATURE_CLIENT_INTAKE: 'true'

  # Workflow Status Report
  workflow-status:
    name: Workflow Status Report
    runs-on: ubuntu-latest
    needs: [validate-workflow, lint-and-typecheck, test, security-scan, build, visual-tests, deploy]
    if: always()
    permissions:
      contents: read
      actions: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate workflow status report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobs = [
              { name: 'validate-workflow', result: '${{ needs.validate-workflow.result }}' },
              { name: 'lint-and-typecheck', result: '${{ needs.lint-and-typecheck.result }}' },
              { name: 'test', result: '${{ needs.test.result }}' },
              { name: 'security-scan', result: '${{ needs.security-scan.result }}' },
              { name: 'build', result: '${{ needs.build.result }}' },
              { name: 'visual-tests', result: '${{ needs.visual-tests.result }}' },
              { name: 'deploy', result: '${{ needs.deploy.result }}' }
            ];
            
            let comment = '## üöÄ CI/CD Pipeline Status Report\n\n';
            comment += `**Workflow:** \`${{ github.workflow }}\`\n`;
            comment += `**Triggered by:** \`${{ github.event_name }}\` on \`${{ github.ref }}\`\n`;
            comment += `**Commit:** \`${{ github.sha }}\`\n\n`;
            
            comment += '### Job Results:\n\n';
            
            jobs.forEach(job => {
              const status = job.result === 'success' ? '‚úÖ' : 
                           job.result === 'failure' ? '‚ùå' : 
                           job.result === 'cancelled' ? '‚èπÔ∏è' : 
                           job.result === 'skipped' ? '‚è≠Ô∏è' : '‚ùì';
              comment += `- ${status} **${job.name}**: \`${job.result}\`\n`;
            });
            
            const allSuccess = jobs.every(job => job.result === 'success');
            const anyFailure = jobs.some(job => job.result === 'failure');
            
            comment += '\n### Summary:\n\n';
            
            if (allSuccess) {
              comment += 'üéâ **All jobs completed successfully!**\n';
            } else if (anyFailure) {
              comment += '‚ö†Ô∏è **Some jobs failed.** Please check the logs above for details.\n';
            } else {
              comment += '‚ÑπÔ∏è **Workflow completed with mixed results.**\n';
            }
            
            // Post comment to PR if this is a pull request
            try {
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  issue_number: context.payload.pull_request.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                console.log('‚úÖ Successfully posted workflow status report');
              } else {
                console.log('‚ÑπÔ∏è Not a pull request, skipping status report comment');
              }
            } catch (apiError) {
              console.error('‚ùå Failed to post status report:', apiError.message);
              // Don't fail the job if comment posting fails
            }
            
            // Set job status based on results
            if (anyFailure) {
              core.setFailed('One or more jobs failed in the CI/CD pipeline');
            }